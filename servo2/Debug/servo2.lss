
servo2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000f4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000006cc  00000000  00000000  00000148  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000085  00000000  00000000  00000814  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_aranges 00000080  00000000  00000000  000008a0  2**3
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000365  00000000  00000000  00000920  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000000c5  00000000  00000000  00000c85  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000290  00000000  00000000  00000d4a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000044  00000000  00000000  00000fdc  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000bb  00000000  00000000  00001020  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 ef       	ldi	r30, 0xF4	; 244
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 59 00 	call	0xb2	; 0xb2 <main>
  8a:	0c 94 78 00 	jmp	0xf0	; 0xf0 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <PORT_INI>:

#include <avr/io.h>
#include <avr/interrupt.h>
#include "common_macros.h"
void PORT_INI(void){
	DDRA&=~(1<<PA0);
  92:	d0 98       	cbi	0x1a, 0	; 26
	PORTA|=(1<<PA0); /*INTERNAL pull up*/
  94:	d8 9a       	sbi	0x1b, 0	; 27
	DDRC&=~(1<<PC0);
  96:	a0 98       	cbi	0x14, 0	; 20
	PORTC|=(1<<PC0);
  98:	a8 9a       	sbi	0x15, 0	; 21
	DDRD|=(1<<PD6);
  9a:	8e 9a       	sbi	0x11, 6	; 17
	CLEAR_BIT(PORTD,6);
  9c:	96 98       	cbi	0x12, 6	; 18
	DDRD|=(1<<PD5);
  9e:	8d 9a       	sbi	0x11, 5	; 17
	CLEAR_BIT(PORTD,5);
  a0:	95 98       	cbi	0x12, 5	; 18
}
  a2:	08 95       	ret

000000a4 <TIMER16_FAST_PWM_INIT>:
void TIMER16_FAST_PWM_INIT(unsigned int compare){
	TCCR1A = 1<<WGM11 | 1<<COM1A1 | 1<<COM1A0;
  a4:	22 ec       	ldi	r18, 0xC2	; 194
  a6:	2f bd       	out	0x2f, r18	; 47
	TCCR1B = 1<<WGM13 | 1<<WGM12 | 1<<CS10;
  a8:	29 e1       	ldi	r18, 0x19	; 25
  aa:	2e bd       	out	0x2e, r18	; 46
	ICR1 = compare;/*Max count*/
  ac:	97 bd       	out	0x27, r25	; 39
  ae:	86 bd       	out	0x26, r24	; 38
}
  b0:	08 95       	ret

000000b2 <main>:
int main(void)
{
	PORT_INI();
  b2:	0e 94 49 00 	call	0x92	; 0x92 <PORT_INI>
	TIMER16_FAST_PWM_INIT(19999);
  b6:	8f e1       	ldi	r24, 0x1F	; 31
  b8:	9e e4       	ldi	r25, 0x4E	; 78
  ba:	0e 94 52 00 	call	0xa4	; 0xa4 <TIMER16_FAST_PWM_INIT>
	OCR1A = ICR1 - 2100;
  be:	86 b5       	in	r24, 0x26	; 38
  c0:	97 b5       	in	r25, 0x27	; 39
  c2:	84 53       	subi	r24, 0x34	; 52
  c4:	98 40       	sbci	r25, 0x08	; 8
  c6:	9b bd       	out	0x2b, r25	; 43
  c8:	8a bd       	out	0x2a, r24	; 42
    while(1)
    {
        if(BIT_IS_CLEAR(PINA,0)) {
  ca:	c8 99       	sbic	0x19, 0	; 25
  cc:	07 c0       	rjmp	.+14     	; 0xdc <main+0x2a>
			OCR1A = ICR1 - 2100;
  ce:	86 b5       	in	r24, 0x26	; 38
  d0:	97 b5       	in	r25, 0x27	; 39
  d2:	84 53       	subi	r24, 0x34	; 52
  d4:	98 40       	sbci	r25, 0x08	; 8
  d6:	9b bd       	out	0x2b, r25	; 43
  d8:	8a bd       	out	0x2a, r24	; 42
			SET_BIT(PORTD,6);
  da:	96 9a       	sbi	0x12, 6	; 18
			}
		if(BIT_IS_CLEAR(PINC,0)) {
  dc:	98 99       	sbic	0x13, 0	; 19
  de:	f5 cf       	rjmp	.-22     	; 0xca <main+0x18>
			OCR1A = ICR1 - 500;
  e0:	86 b5       	in	r24, 0x26	; 38
  e2:	97 b5       	in	r25, 0x27	; 39
  e4:	84 5f       	subi	r24, 0xF4	; 244
  e6:	91 40       	sbci	r25, 0x01	; 1
  e8:	9b bd       	out	0x2b, r25	; 43
  ea:	8a bd       	out	0x2a, r24	; 42
			CLEAR_BIT(PORTD,6);
  ec:	96 98       	cbi	0x12, 6	; 18
  ee:	ed cf       	rjmp	.-38     	; 0xca <main+0x18>

000000f0 <_exit>:
  f0:	f8 94       	cli

000000f2 <__stop_program>:
  f2:	ff cf       	rjmp	.-2      	; 0xf2 <__stop_program>
